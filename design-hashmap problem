class ListNode:
    def __init__(self, key, value):
        self.key = key
        self.value = value
        self.next = None

class MyHashMap:
    def __init__(self):
        self.size = 1000 
        self.buckets = [None] * self.size 
        
    def _hash(self, key):
        """Generate hash index for the key."""
        return key % self.size

    def put(self, key: int, value: int) -> None:
        """Insert (key, value) or update if key exists."""
        index = self._hash(key)
        if self.buckets[index] is None:
            self.buckets[index] = ListNode(key, value)  
        else:
            curr = self.buckets[index]
            while curr:
                if curr.key == key:  
                    curr.value = value
                    return
                if curr.next is None: 
                    break
                curr = curr.next
            curr.next = ListNode(key, value)

    def get(self, key: int) -> int:
        """Return value for key, or -1 if not found."""
        index = self._hash(key)
        curr = self.buckets[index]
        while curr:
            if curr.key == key:
                return curr.value
            curr = curr.next
        return -1

    def remove(self, key: int) -> None:
        """Remove the key from the HashMap."""
        index = self._hash(key)
        curr = self.buckets[index]
        if not curr:
            return

        if curr.key == key:
            self.buckets[index] = curr.next  
            return

        prev = None
        while curr:
            if curr.key == key:
                prev.next = curr.next  
                return
            prev, curr = curr, curr.next

myHashMap = MyHashMap()
myHashMap.put(1, 1)    
myHashMap.put(2, 2)    
print(myHashMap.get(1)) 
print(myHashMap.get(3)) 
myHashMap.put(2, 1)    
print(myHashMap.get(2)) 
myHashMap.remove(2)   
print(myHashMap.get(2)) 


Alternative Approach: Using Array-----


class MyHashMap:
    def __init__(self):
        self.size = 10**6 + 1
        self.map = [-1] * self.size

    def put(self, key: int, value: int) -> None:
        self.map[key] = value

    def get(self, key: int) -> int:
        return self.map[key]

    def remove(self, key: int) -> None:
        self.map[key] = -1
