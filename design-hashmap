class MyHashMap:
    def __init__(self):
        
        self.size = 1000
        self.buckets = [None] * self.size
    
    def _hash(self, key: int) -> int:
       
        return key % self.size
    
    def put(self, key: int, value: int) -> None:
        index = self._hash(key)
        if self.buckets[index] is None:
            self.buckets[index] = []
        
        for i, (k, v) in enumerate(self.buckets[index]):
            if k == key:
                self.buckets[index][i] = (key, value)
                return
        
        self.buckets[index].append((key, value))
    
    def get(self, key: int) -> int:
        index = self._hash(key)
        if self.buckets[index] is not None:
            for k, v in self.buckets[index]:
                if k == key:
                    return v
        return -1
    
    def remove(self, key: int) -> None:
        index = self._hash(key)
        if self.buckets[index] is not None:
            self.buckets[index] = [(k, v) for k, v in self.buckets[index] if k != key]
            if not self.buckets[index]:
                self.buckets[index] = None

myHashMap = MyHashMap()
myHashMap.put(1, 1)
myHashMap.put(2, 2)
print(myHashMap.get(1)) 
print(myHashMap.get(3))  
myHashMap.put(2, 1)
print(myHashMap.get(2))  
myHashMap.remove(2)
print(myHashMap.get(2))  
